from aiogram import BaseMiddleware
from aiogram.types import Message
from typing import Callable, Awaitable, Dict, Any, Coroutine

from src.database import SessionLocal
from src.models import User


class RoleMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable,
            event: Message,
            data: dict
    ) -> Awaitable:
        user_role = data.get("user_role")  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ –ë–î
        required_role = handler.__annotations__.get("required_role")

        if required_role and user_role != required_role:
            await event.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await handler(event, data)

class AuthMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable,
        event: Message,
        data: Dict[str, Any]
    ) -> Any | None:
        db = SessionLocal()
        user = db.query(User).filter(User.user_id == event.from_user.id).first()

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥ /start –∏ /logout
        if event.text in ['/start', '/logout']:
            return await handler(event, data)

        if not user:
            await event.answer("‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return

        data["user"] = user  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return await handler(event, data)