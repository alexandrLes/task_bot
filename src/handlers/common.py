from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy import update

from src import keyboards
from src.database import SessionLocal
from src.models import User, UserRole
from src.states import AuthStates

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if user:
        role = "–∞–≤—Ç–æ—Ä" if user.role.name == "AUTHOR" else "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        if not user.is_active:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—Ö–æ–¥–µ
            db.execute(
                update(User)
                .where(User.user_id == message.from_user.id)
                .values(is_active=True)
            )
            db.commit()
            await message.answer(
                f"üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞! –í–∞—à–∞ —Ä–æ–ª—å: {role}."
            )
        else:
            await message.answer(
                f"üîπ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {role}. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö."
            )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
            reply_markup=keyboards.role_keyboard()
        )
        await state.set_state(AuthStates.choosing_role)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
@router.callback_query(F.data.startswith("role_"), AuthStates.choosing_role)
async def set_user_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[1]
    db = SessionLocal()

    new_user = User(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        role=UserRole(role)
    )

    db.add(new_user)
    db.commit()

    await callback.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role}!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏."
    )
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /logout - —Å–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@router.message(Command("logout"))
async def cmd_logout(message: Message):
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if user and user.is_active:
        db.execute(
            update(User)
            .where(User.user_id == message.from_user.id)
            .values(is_active=False)
        )
        db.commit()
        await message.answer(
            "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )
    elif user:
        await message.answer("‚Ñπ –í—ã —É–∂–µ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    else:
        await message.answer("‚Ñπ –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = SessionLocal()
    user = db.query(User).filter(User.user_id == message.from_user.id).first()

    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return

    stats = {
        "user_id": user.user_id,
        "username": user.username,
        "tasks_completed": len([t for t in user.tasks_assigned if t.task.status == "completed"]),
        "tasks_created": len([t for t in user.tasks_created])
    }

    await message.answer(
        f"üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"ID: {stats.get('user_id')}\n"
        f"Username: {stats.get('username')}\n"
        f"–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: {stats.get('tasks_created')}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {stats.get('tasks_completed')}"
    )