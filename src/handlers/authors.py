from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from .. import keyboards
from src.database import SessionLocal
from src.models import Task
from src.utils.validators import validate_deadline

router = Router()


@router.message(Command("create_task"))
async def cmd_create_task(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=keyboards.cancel_keyboard()
    )
    await state.set_state("waiting_for_task_title")


@router.message(F.text, StateFilter("waiting_for_task_title"))
async def process_task_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    await state.update_data(title=message.text)
    await message.answer("üìÑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state("waiting_for_task_description")


@router.message(F.text, StateFilter("waiting_for_task_description"))
async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    await state.update_data(description=message.text)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024-12-31 18:00):")
    await state.set_state("waiting_for_task_deadline")


@router.message(F.text, StateFilter("waiting_for_task_deadline"))
async def process_task_deadline(message: Message, state: FSMContext):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    try:
        deadline = validate_deadline(message.text)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        await state.update_data(deadline=deadline)

        data = await state.get_data()
        db = SessionLocal()
        task = Task(
            author_id=message.from_user.id,
            title=data["title"],
            description=data["description"],
            deadline=deadline
        )
        db.add(task)
        db.commit()

        await message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ —É–≤–∏–¥—è—Ç –µ–≥–æ –≤ /available_tasks.")
        await state.clear()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")