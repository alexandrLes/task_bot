from select import select

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from src import keyboards
from src.database import SessionLocal
from src.models import Task, TaskStatus

router = Router()


@router.message(Command("available_tasks"))
async def cmd_available_tasks(message: Message):
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."""
    db = SessionLocal()
    tasks = db.query(Task).filter(Task.status == TaskStatus.PENDING).all()

    if not tasks:
        await message.answer("üîÑ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    for task in tasks:
        await message.answer(
            f"üìå –ó–∞–¥–∞–Ω–∏–µ #{task.task_id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}\n"
            f"–°—Ä–æ–∫: {task.deadline}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {task.description[:100]}...",
            reply_markup=keyboards.task_action_keyboard(task.task_id)
        )

@router.message(Command("my_tasks")):
async def cmd_my_tasks(message: Message):
    db = SessionLocal()
    tasks = db.query(Task).filter(Task.status == TaskStatus.PENDING).all()




@router.callback_query(F.data.startswith("take_task_"))
async def take_task(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –±–µ—Ä–µ—Ç –∑–∞–¥–∞–Ω–∏–µ."""
    task_id = callback.data.split("_")[-1]
    db = SessionLocal()
    task = db.query(Task).filter(Task.task_id == task_id).first()

    if task.status != TaskStatus.PENDING:
        await callback.answer("‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –¥—Ä—É–≥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º.")
        return

    task.status = TaskStatus.IN_PROGRESS
    task.executor_id = callback.from_user.id
    db.commit()

    await callback.message.edit_text(
        f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ ¬´{task.title}¬ª. "
        f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task.deadline}."
    )


@router.callback_query(F.data.startswith("task_details_"))
async def task_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è."""
    task_id = callback.data.split("_")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ callback_data

    with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ë–î
        task = db.query(Task).filter(Task.task_id == task_id).first()

        if not task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"üìå <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task.title}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task.description}\n"
            f"‚è≥ <b>–°—Ä–æ–∫:</b> {task.deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ <b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {task.reward or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {task.status.value}\n"
            f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> @{task.author.username if task.author.username else 'N/A'}"
        )

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
        if task.status == TaskStatus.IN_PROGRESS and task.assignments:
            executor = task.assignments[0].executor
            text += f"\nüë∑ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{executor.username if executor.username else 'N/A'}"

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if task.status == TaskStatus.COMPLETED and task.submissions:
            submission = task.submissions[0]
            text += f"\n‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <a href='{submission.screenshot_url}'>–°–∫—Ä–∏–Ω—à–æ—Ç</a>"

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        buttons = []
        user_id = callback.from_user.id

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–≤—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏—è
        if user_id == task.author_id:
            if task.status == TaskStatus.IN_PROGRESS:
                buttons.append(
                    InlineKeyboardButton(
                        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        callback_data=f"confirm_task_{task_id}"
                    )
                )
                buttons.append(
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_task_{task_id}"
                    )
                )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        elif any(asg.executor_id == user_id for asg in task.assignments):
            if task.status == TaskStatus.IN_PROGRESS:
                buttons.append(
                    InlineKeyboardButton(
                        text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                        callback_data=f"submit_task_{task_id}"
                    )
                )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞–Ω–∏–π
        buttons.append(
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="my_tasks" if user_id == task.author_id else "available_tasks"
            )
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()